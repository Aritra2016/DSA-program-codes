Q1)  Given an array of integers nums and an integer target, return indices of the two
numbers such that they add up to target.


import java.util.HashMap;
import java.util.Map;

public class TwoSum {
    public static int[] twoSum(int[] nums, int target) {
        // Create a HashMap to store the complement of each number and its index
        Map<Integer, Integer> complementMap = new HashMap<>();

        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];

            // Check if the complement exists in the HashMap
            if (complementMap.containsKey(complement)) {
                // Return the indices of the two numbers
                return new int[]{complementMap.get(complement), i};
            }

            // Add the current number and its index to the HashMap
            complementMap.put(nums[i], i);
        }

        // No two numbers add up to the target
        return new int[0];
    }

    public static void main(String[] args) {
        int[] nums = {2, 7, 11, 15};
        int target = 9;

        int[] indices = twoSum(nums, target);
        if (indices.length == 2) {
            System.out.println("Indices: " + indices[0] + ", " + indices[1]);
            System.out.println("Numbers: " + nums[indices[0]] + ", " + nums[indices[1]]);
        } else {
            System.out.println("No two numbers add up to the target.");
        }
    }
}



Q2) Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in
nums which are not equal to val.


import java.util.HashMap;
import java.util.Map;

public class TwoSum {

    public static int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> numMap = new HashMap<>();

        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (numMap.containsKey(complement)) {
                return new int[] { i, numMap.get(complement) };
            }
            numMap.put(nums[i], i);
        }

        return new int[0];
    }

    public static void main(String[] args) {
        int[] nums = { 2, 7, 11, 15 };
        int target = 9;

        int[] result = twoSum(nums, target);
        System.out.println(result[0] + ", " + result[1]);  // Output: 0, 1
    }
}



Q3) Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

**Example 1:**
Input: nums = [1,3,5,6], target = 5

Output: 2



public class SearchInsertPosition {

    public static int searchInsert(int[] nums, int target) {
        int left = 0;
        int right = nums.length - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        return left;
    }

    public static void main(String[] args) {
        int[] nums = { 1, 3, 5, 6 };
        int target = 5;

        int index = searchInsert(nums, target);
        System.out.println(index);  // Output: 2
    }
}



Q4) You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.

Increment the large integer by one and return the resulting array of digits.

**Example 1:**
Input: digits = [1,2,3]
Output: [1,2,4]

**Explanation:** The array represents the integer 123.

Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].



public class PlusOne {

    public static int[] plusOne(int[] digits) {
        int n = digits.length;
        
      
        for (int i = n - 1; i >= 0; i--) {
          
            digits[i]++;
            
          
            if (digits[i] == 10) {
            
                digits[i] = 0;
                
            } else {
               
                return digits;
            }
        }
       
        int[] newDigits = new int[n + 1];
        newDigits[0] = 1;
        
        return newDigits;
    }

    public static void main(String[] args) {
        int[] digits = { 1, 2, 3 };
        
        int[] result = plusOne(digits);
        
        for (int digit : result) {
            System.out.print(digit + " ");
        }
        
    }
}



Q5) You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

**Example 1:**
Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]

**Explanation:** The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.





public void merge(int[] nums1, int m, int[] nums2, int n) {
  
  
  int i = m - 1;
  int j = n - 1;
  
  
  int k = m + n - 1;
 
 
  while (i >= 0 && j >= 0) {
   
   
    if (nums1[i] > nums2[j]) {
      nums1[k] = nums1[i];
      i--;
    } else {
      nums1[k] = nums2[j];
      j--;
    }
    k--;
  }
 
 
  while (j >= 0) {
    nums1[k] = nums2[j];
    j--;
    k--;
  }
}




Q6) Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

**Example 1:**
Input: nums = [1,2,3,1]

Output: true


import java.util.HashSet;
import java.util.Set;

public class ContainsDuplicate {

    public static boolean containsDuplicate(int[] nums) {
        Set<Integer> set = new HashSet<>();

        for (int num : nums) {
            if (set.contains(num)) {
                return true; // Found a duplicate element
            }
            set.add(num);
        }

        return false; // No duplicates found
    }

    public static void main(String[] args) {
        int[] nums = {1, 2, 3, 1};

        boolean hasDuplicate = containsDuplicate(nums);
        System.out.println(hasDuplicate); // Output: true
    }
}





Q7) Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the nonzero elements.

Note that you must do this in-place without making a copy of the array.

**Example 1:**
Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]





public class MoveZeroes {

    public static void moveZeroes(int[] nums) {
        int n = nums.length;
        int nonZeroIndex = 0;

        // Move all non-zero elements to the left side of the array
        for (int i = 0; i < n; i++) {
            if (nums[i] != 0) {
                nums[nonZeroIndex] = nums[i];
                nonZeroIndex++;
            }
        }

        // Fill the remaining positions with zeroes
        for (int i = nonZeroIndex; i < n; i++) {
            nums[i] = 0;
        }
    }

    public static void main(String[] args) {
        int[] nums = {0, 1, 0, 3, 12};

        moveZeroes(nums);

        for (int num : nums) {
            System.out.print(num + " ");
        }
        // Output: 1 3 12 0 0
    }
}



Q8) You have a set of integers s, which originally contains all the numbers from 1 to n. Unfortunately, due to some error, one of the numbers in s got duplicated to another number in the set, which results in repetition of one number and loss of another number.

You are given an integer array nums representing the data status of this set after the error.

Find the number that occurs twice and the number that is missing and return them in the form of an array.

**Example 1:**
Input: nums = [1,2,2,4]
Output: [2,3]

import java.util.Arrays;

public class FindErrorNums {

    public static int[] findErrorNums(int[] nums) {
        int n = nums.length;
        int[] result = new int[2];

        Arrays.sort(nums);

        int duplicate = -1;
        int missing = 1;

        for (int i = 1; i < n; i++) {
            if (nums[i] == nums[i - 1]) {
                duplicate = nums[i];
            } else if (nums[i] > nums[i - 1] + 1) {
                missing = nums[i - 1] + 1;
            }
        }

        // Handle edge case where the missing number is at the end
        if (nums[n - 1] != n) {
            missing = n;
        }

        result[0] = duplicate;
        result[1] = missing;

        return result;
    }

    public static void main(String[] args) {
        int[] nums = {1, 2, 2, 4};

        int[] result = findErrorNums(nums);

        for (int num : result) {
            System.out.print(num + " ");
        }
        // Output: 2 3
    }
}

































































































