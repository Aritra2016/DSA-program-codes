Q1). Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2),..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum.


import java.util.Arrays;

public class ArrayPairSum {
    public static int arrayPairSum(int[] nums) {
        // Sort the array in ascending order
        Arrays.sort(nums);
        
        int maxSum = 0;
        
        // Iterate over the sorted array and sum the minimum of every pair
        for (int i = 0; i < nums.length; i += 2) {
            maxSum += nums[i];
        }
        
        return maxSum;
    }
    
    public static void main(String[] args) {
        int[] nums = {1, 4, 3, 2};
        int maxSum = arrayPairSum(nums);
        System.out.println("Maximum sum: " + maxSum);
    }
}




Question 2). Alice has n candies, where the ith candy is of type candyType[i]. Alice noticed that she started to gain weight, so she visited a doctor. 

The doctor advised Alice to only eat n / 2 of the candies she has (n is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice. 

Given the integer array candyType of length n, return the maximum number of different types of candies she can eat if she only eats n / 2 of them.

-
import java.util.HashSet;
import java.util.Set;

public class MaxCandies {
    public static int maxCandies(int[] candyType) {
        int maxAllowed = candyType.length / 2;
        
        Set<Integer> uniqueCandies = new HashSet<>();
        
        // Count the number of unique candy types
        for (int candy : candyType) {
            uniqueCandies.add(candy);
        }
        
        // Return the maximum between the number of unique candy types and the maximum allowed
        return Math.min(uniqueCandies.size(), maxAllowed);
    }
    
    public static void main(String[] args) {
        int[] candyType = {1, 1, 2, 2, 3, 3};
        int maxTypes = maxCandies(candyType);
        System.out.println("Maximum number of different types of candies: " + maxTypes);
    }
}



Question-3) We define a harmonious array as an array where the difference between its maximum value
and its minimum value is exactly 1.

Given an integer array nums, return the length of its longest harmonious subsequence
among all its possible subsequences.

A subsequence of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.

Example 1:
Input: nums = [1,3,2,2,5,2,3,7]
Output: 5



import java.util.HashMap;
import java.util.Map;

public class LongestHarmoniousSubsequence {
    public static int findLHS(int[] nums) {
        // Map to store the frequency of each number
        Map<Integer, Integer> frequencyMap = new HashMap<>();
        
        // Calculate the frequency of each number in the array
        for (int num : nums) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }
        
        int longestSubsequence = 0;
        
        // Iterate over the numbers in the array
        for (int num : nums) {
            // Check if there is a number with a difference of 1 in frequency
            if (frequencyMap.containsKey(num + 1)) {
                int currentSubsequence = frequencyMap.get(num) + frequencyMap.get(num + 1);
                longestSubsequence = Math.max(longestSubsequence, currentSubsequence);
            }
        }
        
        return longestSubsequence;
    }
    
    public static void main(String[] args) {
        int[] nums = {1, 3, 2, 2, 5, 2, 3, 7};
        int longestSubsequence = findLHS(nums);
        System.out.println("Length of the longest harmonious subsequence: " + longestSubsequence);
    }
}


Q-4) Given an integer array nums, find three numbers whose product is maximum and return the maximum product.

**Example 1:**
Input: nums = [1,2,3]
Output: 6



import java.util.Arrays;

public class MaximumProduct {
    public static int maximumProduct(int[] nums) {
        // Sort the array in ascending order
        Arrays.sort(nums);
        
        int n = nums.length;
        
        // Maximum product can be either the product of the three largest numbers
        // or the product of the two smallest numbers and the largest number
        int product1 = nums[n-1] * nums[n-2] * nums[n-3];
        int product2 = nums[0] * nums[1] * nums[n-1];
        
        // Return the maximum of the two products
        return Math.max(product1, product2);
    }
    
    public static void main(String[] args) {
        int[] nums = {1, 2, 3};
        int maxProduct = maximumProduct(nums);
        System.out.println("Maximum product: " + maxProduct);
    }
}




Question 5-
Given an integer array nums, find three numbers whose product is maximum and return the maximum product.

**Example 1:**
Input: nums = [1,2,3]
Output: 6


import java.util.Arrays;

public class MaximumProduct {
    public static int maximumProduct(int[] nums) {
        Arrays.sort(nums);
        
        int n = nums.length;
        
        // Maximum product can be either the product of the three largest numbers
        // or the product of the two smallest numbers and the largest number
        int product1 = nums[n-1] * nums[n-2] * nums[n-3];
        int product2 = nums[0] * nums[1] * nums[n-1];
        
        // Return the maximum of the two products
        return Math.max(product1, product2);
    }
    
    public static void main(String[] args) {
        int[] nums = {1, 2, 3};
        int maxProduct = maximumProduct(nums);
        System.out.println("Maximum product: " + maxProduct);
    }
}



Question 6-
Given an array of integers nums which is sorted in ascending order, and an integer target,
write a function to search target in nums. If target exists, then return its index. Otherwise,
return -1.

You must write an algorithm with O(log n) runtime complexity.

Input: nums = [-1,0,3,5,9,12], target = 9
Output: 4

**Explanation:** 9 exists in nums and its index is 4


public class BinarySearch {
    public static int search(int[] nums, int target) {
        int left = 0;
        int right = nums.length - 1;
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            
            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        
        return -1;
    }
    
    public static void main(String[] args) {
        int[] nums = {-1, 0, 3, 5, 9, 12};
        int target = 9;
        
        int index = search(nums, target);
        System.out.println("Index of target: " + index);
    }
}



Question 7-
An array is monotonic if it is either monotone increasing or monotone decreasing.

An array nums is monotone increasing if for all i <= j, nums[i] <= nums[j]. An array nums is
monotone decreasing if for all i <= j, nums[i] >= nums[j].

Given an integer array nums, return true if the given array is monotonic, or false otherwise.

**Example 1:**
Input: nums = [1,2,2,3]
Output: true



public class MonotonicArray {
    public static boolean isMonotonic(int[] nums) {
        boolean increasing = true;
        boolean decreasing = true;
        
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] > nums[i - 1]) {
                decreasing = false;
            } else if (nums[i] < nums[i - 1]) {
                increasing = false;
            }
        }
        
        return increasing || decreasing;
    }
    
    public static void main(String[] args) {
        int[] nums = {1, 2, 2, 3};
        
        boolean isMonotonic = isMonotonic(nums);
        System.out.println("Is the array monotonic? " + isMonotonic);
    }
}




Question 8--  You are given an integer array nums and an integer k.

In one operation, you can choose any index i where 0 <= i < nums.length and change nums[i] to nums[i] + x where x is an integer from the range [-k, k]. You can apply this operation at most once for each index i.

The score of nums is the difference between the maximum and minimum elements in nums.

Return the minimum score of nums after applying the mentioned operation at most once for each index in it.

**Example 1:**
Input: nums = [1], k = 0
Output: 0

**Explanation:** The score is max(nums) - min(nums) = 1 - 1 = 0.


import java.util.Arrays;

public class MinimumScore {
    public static int minimumScore(int[] nums, int k) {
        Arrays.sort(nums);
        
        int n = nums.length;
        int minScore = nums[n-1] - nums[0];
        
        for (int i = 1; i < n; i++) {
            int min = Math.min(nums[0] + k, nums[i] - k);
            int max = Math.max(nums[i-1] + k, nums[n-1] - k);
            minScore = Math.min(minScore, max - min);
        }
        
        return minScore;
    }
    
    public static void main(String[] args) {
        int[] nums = {1};
        int k = 0;
        
        int minScore = minimumScore(nums, k);
        System.out.println("Minimum score: " + minScore);
    }
}























































































